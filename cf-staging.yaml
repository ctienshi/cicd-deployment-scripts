# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 Enterprise Integrator Clustered deployment with Analytics Configured
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - KeyPairName
          - WSO2InstanceType
      - Label:
          default: Network Configuration
        Parameters:
          - CertificateName
      - Label:
          default: Database Configuration
        Parameters:
          - DBUsername
          - DBPassword
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key ID
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      CertificateName:
        default: SSL Certificate Name
      KeyPairName:
        default: Key Pair Name
      DBUsername:
        default: Username
      DBPassword:
        default: Password
      JDKVersion:
        default: JDK Version
      WSO2InstanceType:
        default: Instance Type
      AMIid:
        default: AMI ID
Resources:
  # networking configurations
  WSO2EIVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  WSO2EIPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2EIPublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WSO2EIVPC
        CidrBlock: 10.0.252.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
  WSO2EIPublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  WSO2EIPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EIVPC
  WSO2EIPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      SubnetId: !Ref WSO2EIPublicSubnet1
  WSO2EIPublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      SubnetId: !Ref WSO2EIPublicSubnet2
  WSO2EIPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      GatewayId: !Ref WSO2EIPublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: WSO2EIVPCInternetGatewayAttachment
  WSO2EIVPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref WSO2EIPublicInternetGateway
      VpcId: !Ref WSO2EIVPC
  WSO2EIPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2EIPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  WSO2EIPrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EIVPC
  WSO2EIPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WSO2EINATGateway
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
  WSO2EIPrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
      SubnetId: !Ref WSO2EIPrivateSubnet1
  WSO2EIPrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
      SubnetId: !Ref WSO2EIPrivateSubnet2
  WSO2EINATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - WSO2EIEIP
        - AllocationId
      SubnetId: !Ref WSO2EIPublicSubnet1
  WSO2BastionEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt WSO2BastionEIP.AllocationId
      InstanceId: !Ref WSO2BastionInstance
  WSO2EIEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  WSO2BastionEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  # database configurations
  WSO2EIDBInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  WSO2EIDBSTAGINGInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      VPCSecurityGroups:
        - !Ref WSO2EIDBInstanceSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: WSO2EIDBSTAGINGInstance
      DBName: WSO2_EI_DB
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref WSO2EIDBSubnetGroup
  WSO2EIDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref WSO2EIPrivateSubnet1
        - !Ref WSO2EIPrivateSubnet2
  # Product configurations
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 Bastion node Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WSO2EISecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 Enterprise Integrator Security Group
      GroupName: WSO2SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '4100'
          ToPort: '4100'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
  WSO2BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref AMIid
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2BastionInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          #cloud-boothook
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          apt-get update
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          export DB_HOSTNAME=${WSO2EIDBSTAGINGInstance.Endpoint.Address}
          export DB_PORT=${WSO2EIDBSTAGINGInstance.Endpoint.Port}
          export DB_USERNAME=${DBUsername}
          export DB_PASSWORD=${DBPassword}
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /usr/local/bin/provision_db_ei.sh
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /usr/local/bin/provision_db_ei.sh
          sed -i "s/CF_DB_HOST/${WSO2EIDBSTAGINGInstance.Endpoint.Address}/g" /usr/local/bin/provision_db_ei.sh
          sed -i "s/CF_DB_PORT/${WSO2EIDBSTAGINGInstance.Endpoint.Port}/g" /usr/local/bin/provision_db_ei.sh
          bash /usr/local/bin/provision_db_ei.sh
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2BastionInstance --region ${AWS::Region}
  WSO2EIInstance1:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref AMIid
      InstanceType: !Ref WSO2InstanceType
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2EIInstance1
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPrivateSubnet1
          GroupSet:
            - !Ref WSO2EISecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          #cloud-boothook
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          apt-get update
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          wget https://github.com/gvalkov/tailon/releases/download/v1.0.0/tailon_1.0.0_linux_amd64.tar.gz -P /home/ubuntu/
          chmod +x /home/ubuntu/tailon_1.0.0_linux_amd64.tar.gz
          tar -xvf /home/ubuntu/tailon_1.0.0_linux_amd64.tar.gz -C /home/ubuntu
          unzip /home/ubuntu/wso2ei-6.4.0.zip -d /home/ubuntu/
          sed -i "s/ACCESS_KEY/${AWSAccessKeyId}/g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          sed -i "s/EI_ALB_DNS_NAME/${WSO2EILoadBalancer.DNSName}/g" /home/ubuntu/wso2ei-6.4.0/conf/carbon.xml
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /home/ubuntu/wso2ei-6.4.0/conf/datasources/master-datasources.xml
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /home/ubuntu/wso2ei-6.4.0/conf/datasources/master-datasources.xml
          sed -i "s/EI_RDS_DNS_NAME/${WSO2EIDBSTAGINGInstance.Endpoint.Address}/g" /home/ubuntu/wso2ei-6.4.0/conf/datasources/master-datasources.xml
          sed -i "s^SECRET_KEY^${AWSAccessKeySecret}^g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          tar -xvf /opt/jdk-8u144-linux-x64.tar.gz -C /opt/
          export PRIVATE_IP=$(ifconfig | grep -m 1 'inet ' | awk '{print $2}')
          sed -i "s/LOCAL-MEMBER-HOST/$PRIVATE_IP/g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          /home/ubuntu/wso2ei-6.4.0/bin/integrator.sh start
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
          nohup /home/ubuntu/tailon alias=wso2_logs,/home/ubuntu/wso2ei-6.4.0/repository/logs/* > nohup.out 2>&1 &
          end=$((SECONDS+600))
          while [ $SECONDS -lt $end ] ; do
              wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
              if [ $? -eq "0" ] ; then
                sleep 30
                /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EIInstance1 --region ${AWS::Region}
              fi
          done
    DependsOn:
      - WSO2EILoadBalancer
      - WSO2EISecurityGroup
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBSTAGINGInstance
      - WSO2BastionInstance
  WSO2EIInstance2:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref AMIid
      InstanceType: !Ref WSO2InstanceType
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2EIInstance2
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPrivateSubnet1
          GroupSet:
            - !Ref WSO2EISecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          #cloud-boothook
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          apt-get update
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          wget https://github.com/gvalkov/tailon/releases/download/v1.0.0/tailon_1.0.0_linux_amd64.tar.gz -P /home/ubuntu/
          chmod +x /home/ubuntu/tailon_1.0.0_linux_amd64.tar.gz
          tar -xvf /home/ubuntu/tailon_1.0.0_linux_amd64.tar.gz -C /home/ubuntu
          unzip /home/ubuntu/wso2ei-6.4.0.zip -d /home/ubuntu/
          sed -i "s/ACCESS_KEY/${AWSAccessKeyId}/g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          sed -i "s/EI_ALB_DNS_NAME/${WSO2EILoadBalancer.DNSName}/g" /home/ubuntu/wso2ei-6.4.0/conf/carbon.xml
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /home/ubuntu/wso2ei-6.4.0/conf/datasources/master-datasources.xml
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /home/ubuntu/wso2ei-6.4.0/conf/datasources/master-datasources.xml
          sed -i "s/EI_RDS_DNS_NAME/${WSO2EIDBSTAGINGInstance.Endpoint.Address}/g" /home/ubuntu/wso2ei-6.4.0/conf/datasources/master-datasources.xml
          sed -i "s^SECRET_KEY^${AWSAccessKeySecret}^g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          tar -xvf /opt/jdk-8u144-linux-x64.tar.gz -C /opt/
          export PRIVATE_IP=$(ifconfig | grep -m 1 'inet ' | awk '{print $2}')
          sed -i "s/LOCAL-MEMBER-HOST/$PRIVATE_IP/g" /home/ubuntu/wso2ei-6.4.0/conf/axis2/axis2.xml
          /home/ubuntu/wso2ei-6.4.0/bin/integrator.sh start
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
          nohup /home/ubuntu/tailon alias=wso2_logs,/home/ubuntu/wso2ei-6.4.0/repository/logs/* > nohup.out 2>&1 &
          end=$((SECONDS+600))
          while [ $SECONDS -lt $end ] ; do
              wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
              if [ $? -eq "0" ] ; then
                sleep 30
                /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EIInstance2 --region ${AWS::Region}
              fi
          done
    DependsOn:
      - WSO2EILoadBalancer
      - WSO2EISecurityGroup
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBSTAGINGInstance
      - WSO2BastionInstance
      - WSO2EIInstance1
  WSO2EILoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 EI ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4100'
          ToPort: '4100'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4100'
          ToPort: '4100'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
  WSO2EILoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: EI
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2EIPublicSubnet1
        - !Ref WSO2EIPublicSubnet2
      SecurityGroups:
        - !Ref WSO2EILoadBalancerSecurityGroup
  WSO2EIALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: ei-carbon-9443
      Port: 9443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref WSO2EIInstance1
        Port: 9443
      - Id: !Ref WSO2EIInstance2
        Port: 9443
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei
  WSO2EIServicesALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /
      HealthCheckPort: 8280
      Matcher:
        HttpCode: 200
      Name: ei-carbon-8280
      Port: 8280
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref WSO2EIInstance1
        Port: 8280
      - Id: !Ref WSO2EIInstance2
        Port: 8280
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei
  WSO2EILogsALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /
      HealthCheckPort: 8080
      Matcher:
        HttpCode: 200
      Name: ei-carbon-8080
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref WSO2EIInstance1
        Port: 8080
      - Id: !Ref WSO2EIInstance2
        Port: 8080
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei
  WSO2EIServicesALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EIServicesALBTargetGroup
      LoadBalancerArn: !Ref WSO2EILoadBalancer
      Port: 8280
      Protocol: HTTP
  WSO2EILogsALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EILogsALBTargetGroup
      LoadBalancerArn: !Ref WSO2EILoadBalancer
      Port: 8080
      Protocol: HTTP
  WSO2EIALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EIALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2EILoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2EILoadBalancerSecurityGroup
Outputs:
  MgtConsoleUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - '/carbon'
    Description: Integrator Carbon Management Console URL
  CarbonServerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - '/services'
    Description: Carbon Server URL
  ESBHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - ':8280'
    Description: ESB HTTP URL
  ESBHttpsUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - ':8243'
    Description: ESB HTTPSURL
Parameters:
  AWSAccessKeyId:
    Type: String
  AWSAccessKeySecret:
    Type: String
  KeyPairName:
    Description: >-
      The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
    ConstraintDescription: Must be a valid EC2 instance type
  DBUsername:
    Type: String
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Type: String
    MinLength: 8
    NoEcho: true
  JDKVersion:
    Type: String
    Default: ORACLE_JDK_8
    AllowedValues:
      - OPEN_JDK_8
      - ORACLE_JDK_8
  AMIid:
    Type: String
    Default: ami-0f749bc5d7a0d729a
